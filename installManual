

Instalación de ArchLinux con arranque dual,
para Windows 11, ArchLinux y espacio reservado
para otro SO, la raiz de Arch encriptada y
formateado en btrfs.

Para facilitar la instalación con arranque dual y hacer una instalación,
libiana, la imagen de windows fué grabada y customizada gracias a Rufus, de la siguiente manera:

Remove requirement for 4GB+ RAM, SecureBoot and TPM 2.0
Remove requirement for an online Microsoft account
Disable data collection (Skip privace questions)
Disable BitLocker automatic device encryption

La primera y última opción son imprescindibles para dual boot.



También no menos importante, ampliar la partición, por defecto
de EFI de linux de 100 MiB a 250 MiB, para ello antes de instalar
windows le haremos nosotros una partición EFI vacía, para seguidamente
instalar windows, que siempre hay que instalarla antes que linux,
al indicarle el tamaño de su instalación, no durará
en utilizar entre sus particiones la EFI ya formateada.

El número y tamaño de las particiones de windows variará dependiendo,
de la variante de windows que instalemos, yo me limité ha instalar
la home básica, solo uso windows en casos muy puntuales.

Como verás no tengo ni la partición que windows reserva, normalmente
en la versión home en la cuarta partición de unos 500 MiB para hibernación.
En caso de tenerla se debe desabilitar la hibernación siempre que se usa
más de un S.O., no es raro que den conflicto y puedan dar mas de
un quebradero de cabeza.

Por ello en windows se desabilita el FastStartup, tecla Win y cmd,
pulsar con el boton derecho del ratón y ejecutar como administrador,
powercfg /H off

Se aconseja reiniciar un par de veces para asegurarse que no quede
resto de hibernación alguna.



Arrancamos ArchLinux, es hora de ponernos con lo interesante.


# loadkeys es

si no se ve bien el texto
# setfont sun12x22

lat2-08.psfu
lat2-16.psfu
lat4-19.psfu
sun12x22.psfu
solar24x32.psfu

listar tipos de fuente
$ ls -l /usr/share/fonts


Verificar si el PC tiene arranque EFI
y si es así su arquitactura 32 o 64 bits

cat /sys/firmware/efi/fw_platform_size


particiones en disco 1TB

/dev/nvme0n1p1 -   250 MiB EFI System                    fat32 /efi        boot,esp

/dev/nvme0n1p2 -    16 MiB Basic data partition                            msftres


/dev/nvme0n1p3 - 199.7 GiB Microsoft reserve partition   ntfs /mnt/windows msftdata


/dev/nvme0n1p4 -     4 GiB Extended boot loader          btrfs /boot

/dev/nvme0n1p5 -   400 GiB Linux root(x86-64)            btrfs /

/dev/nvme0n1p6 -    40 GiB Microsoft basic data          exFAT

/dev/nvme0n1p7 - 299.5 GiB Linux reserved

/dev/nvme0n1p8 -    33 GiB Linux swap



Primero antes de instalar windows

miramos discos

lsblk

si no es GPT:
sudo parted /dev/sda
(parted) mklabel gpt
(parted) quit

cfdisk /dev/nvme0n1

Nueva la primera 250 MiB como Tipo EFI System
Write y Exit

Formateamos
mkfs.fat -F32 -n EFI System /dev/nvme0n1p1

Salimos de la instalación
reboot

instalamos windows




Continuamos con Arch

# loadkeys es

# setfont lat2-16



para conectar wifi

iwctl

device list

Solo si powered es Off:
adapter Nombre_del_adaptador set-property Powered on


buscamos redes
station Nombre_del_adaptador scan

mostramos redes
station Nombre_del_adaptador get-networks

conectamos
station Nombre_del_adaptador connect "SSID o nombre de la red"

verificamos
station Nombre_del_adaptador show

exit

ping Archlinux.org


sincronizamos relog
timedatectl set-ntp true


Si necesitamos una fuente mas grande "no es necesario"
# pacman -Sy
# pacman -S terminus-font

# setfont ter-v32n



Si quieres usara el instalador de arch
# archinstall
si es asi te puedes olvidar del resto del manual


lsblk

cfdisk /dev/nvme0n1

creamos el resto de particiones indicando sus tipos

partición para boot este debe de excluirse de la encriptación,
complica mucho la instalación y la recuperación del sistema.

/dev/nvme0n1p4 -     4 GiB Extended boot loader          btrfs /boot


partición para el sistema en general, a causa de los dichosos
flatpak y otras instalaciones y cachés el tamaño que preciso
entre home y root es demasiado variopinto, y me he acostumbrado
a guardar todo lo que no quiero perder en otras unidades y en la red,
esta vez he optado por unificar estas clasicas particiones
en una sola y beneficiarme de una mayor flexibilidad.

/dev/nvme0n1p5 -   400 GiB Linux root(x86-64)            btrfs /


he asignado una pequeña partición para intercambio de datos y archivos
entre linux y windows, siempre lo hecho de menos,
probar si podemos tener acceso a btrfs en windows

/dev/nvme0n1p6 -    40 GiB Microsoft basic data          exFAT


¿32 GiB para SWAP? No no me he vuelto loco a pesar de tener 32 GiB de RAM,
la he dejado al final del disco para modificarla con facilidad,
quiero testear y ver si puedo sacarle probecho, para tener
una IA tipo Llama3 instalada en mi propio equipo, ya la he tenido
y una 8b no ha ido demasiado mal :P

/dev/nvme0n1p8 -    33 GiB Linux swap



encriptamos raiz

cryptsetup luksFormat /dev/nvme0n1p5 --cipher aes-xts-plain64 --key-size 256 --hash sha512
para una clave de 32 caracteres ASCII

la desencriptamos

cryptsetup open /dev/nvme0n1p5 cryptroot

la formateamos

mkfs.btrfs -L ArchRoot /dev/mapper/cryptroot


preparar aqui la swap encriptar crypttab luego como root


y el resto

mkfs.btrfs -L ArchBoot /dev/nvme0n1p4

pacman -S exfat-utils

mkfs.exfat -n WinLinux /dev/nvme0n1p6





pacman -S wget


montamos todas las particiones necesarias para preinstalar el sistema

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initmount.sh

# chmod +x initmount.sh
# ./initmount.sh

La de windows por evitar problemas de integridad
no la vamos a montar para ello hemos creado la
WinLinux para intercambiar archivos entre los dos SOs


El FSTAB lo hemos dejado para crear cuando hayamos creado el usuario,
para montar el WinLinux en su directorio correcto.






instalamos el sistema base en /mnt

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initinstall.sh

# chmod +x initinstall.sh
# ./initinstall.sh

mas adelante podemos instalar linux linux-headers, así tenemos dos núcleos y evitamos problemas
pero en un principio va aligerar la instalación




Como ya hemos instalado la base del sistema
accedemos a el
# arch-chroot /mnt




configuraciones básicas



Configueramos teclados en español, sistema en ingles y
usuarios en español

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/langConfig.sh

# chmod +x langConfig.sh
# ./langConfig.sh




Desabilitamos la hibernación necesario si queremos tener instalados mas de un SOs

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/disable-sleep.sh

# chmod +x disable-sleep.sh
# ./disable-sleep.sh




verifica primero groups a ver si podemos añadir plugdev
creamos y configuramos usuarios
le otorgamos el passwd al root
creará un usuario sin privilegios "visitante"
creará un usuario con el nombre que indiquemos con privilegios superuser

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/createuser.sh

# chmod +x createuser.sh
# ./createuser.sh




cd visitante
sudo pacman -Sy
tiene que dar error este usuario no es superadmin

exit

cd nombreUsuario
sudo pacman -Sy
este si es superadmin nos lo debe de permitir

exit



Añadimos correctamente la partición WinLinux en la carpeta de montage del usuario

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/mountWinLinux.sh

# chmod +x mountWinLinux.sh
# ./mountWinLinux.sh




creamos el fstab despues de crear el usuario para añadir correctamente la partición WinLinux

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initfstab.sh

# chmod +x initfstab.sh
# ./initfstab.sh




añadimos windows al grub

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/addwindows.sh

# chmod +x addwindows.sh
# ./addwindows.sh





Configuramos para desencriptar el sistema de archivos raíz, ROOT (/),
a traves del initramfs, en los proximos inicios


# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/cryptroot.sh

# chmod +x cryptroot.sh
# ./cryptroot.sh





La swap vamos a encriptarla en cada inicio con una clave aleatoria diferente
de forma que actuará como una ram volatil ya que no será accesible en cada reinicio

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/cryptswap.sh

# chmod +x cryptswap.sh
# ./cryptswap.sh




VERIFICA
Incluimos los modules del kernel necesarios para que initramfs pueda desencriptar
usando systemd y sd-vconsole y añadimos el modulo para Intel

limpiamos este
==> WARNING: consolefont: no font found in configuration
definimos una fuente de consola "FONT=ter-v32n"
ya añadido con createuser.sh verificar
cat /etc/vconsole.conf
Entonces añadimos el HOOK consolefont al usar systemd sería sd-vconsole

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initramsf.sh

# chmod +x initramsf.sh
# ./initramsf.sh




Instalamos y configuramos grub para el arranque

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/grubInstall.sh

# chmod +x grubInstall.sh
# ./grubInstall.sh





reiniciamos para comprobar si el sistema arranca por si mismo
todabia sin gestor de ventanas

$ exit
repetir exit hasta salir de chroot
$ umount -R /mnt
$ reboot






conectamos a internet

# nmtui-connect

$ ping -c 3 archlinux.com


sincronizamos relog &
Instalamos gestor de RED NetworkManager con iwd que mejora la seguridad y la eficiencia

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/redConfig.sh

# chmod +x redConfig.sh
# ./redConfig.sh









verificando

$ lspci -k

# dmesg | grep usbcore
# dmesg | grep i915 | less

swapon --show

verificamos que los discos se hayan montado correctamente

$ lsblk

$ journalctl -b | grep cryptsetup








-------------------------------------
no ejecutado
paru -S ranger
paru -S mkinitcpio-firmware

Tenemos que verificar si del "mkinitcpio -P" eliminamos los
==> WARNING: Possibly missing firmware for module: 'module_name'
aic94xx, ast, bfa, bnx2x, liquidio, mlxsw_spectrum, nfp, qed, qla1280, qla2xxx, wd719x, xhci_pci

tarda un ratito deberiamos haber instalado solo un kernel y al acabar instalar el zen el proceso habria sido mas rapido

==> WARNING: Possibly missing firmware for module: 'qat_420xx'
indica que el firmware para el módulo qat_420xx, relacionado con la tecnología Intel QuickAssist, no está presente en tu sistema.
-------------------------------------





Instalamos y preparamos sistema para el procesador i9
$ wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/install_i9.sh

chmod +x install_i9.sh
./install_i9.sh


Instalando los servicios de bluetooth
# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/btInstall.sh
# chmod +x btInstall.sh
# ./btInstall.sh





***********




configuramos pacman y añadimos los repositorios
# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/pacmanConf.sh
# chmod +x pacmanConf.sh
# ./pacmanConf.sh

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/pacmanRepo.sh
# chmod +x pacmanRepo.sh
# ./pacmanRepo.sh





VERIFICAR que el repositorio de paru es limpiado del disco
instalamos paru que nos permite instalar
paqueteria del repositorio de la comunidad
AUR y a la vez gestiona los repositorios
oficiales

# wget -P /usr/local/bin https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/paruInstallConf.sh
# chmod +x /usr/local/bin/paruInstallConf.sh
# /usr/local/bin/paruInstallConf.sh




VERIFICAR las configuraciones de usuario
Instalamos el servidor de AUDIO pipewire
# wget -P /usr/local/bin https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/soundServer.sh
# chmod +x /usr/local/bin/soundServer.sh
# /usr/local/bin/soundServer.sh









$ sudo paru -S sddm

$ sudo systemctl enable sddm.service
$ sudo reboot





# Instalamos el gestor de sesión SDDM para iniciar LXQt con KWin en Wayland
install "sddm"

como usuario:
install "sddm-archlinux-theme-git"



omito esto
--------------------------------
SDDM_CONF="/etc/sddm.conf"

if [ ! -f "$SDDM_CONF" ]; then
    sudo bash -c "cat > \"$SDDM_CONF\" << EOF
[Autologin]
# User=c2mismo
# Session=lxqt-wayland.desktop

[General]
NumLock=on
cambialo por off a ver si funciona

[Theme]
Current=archlinux
EOF"
else
    echo "El archivo de sesión $SDDM_CONF no ha sido creado:"
    echo "El archivo de sesión ya existe."
fi
--------------------------------------------

# Verificar si SDDM está habilitado antes de habilitar el servicio
if systemctl is-enabled sddm.service &> /dev/null; then
    echo "El servicio SDDM ya está habilitado."
else
    sudo systemctl enable sddm.service
    echo "SDDM ha sido habilitado para iniciar en el arranque."
fi





GESTORES DE VENTANAS


kde mínimo para mayor integridad y minimo un terminal y un explorador de archivos
# paru -S plasma-desktop plasma-workspace kwayland egl-wayland plasma-wayland-protocols plasma-nm dolphin








nos aseguramos que el sistema no haga hibernación

deshabilitar la hibernacion:
cp /etc/systemd/logind.conf /etc/systemd/logind.conf.backup
sudo nano /etc/systemd/logind.conf

#HandlePowerKey=ignore
por
HandlePowerKey=ignore

#HandlePowerKeyLongPress=poweroff
por
HandlePowerKeyLongPress=poweroff

#HandleHibernateKey=hibernate
por
HandleHibernateKey=ignore

#HandleHibernateKeyLongPress=ignore
por
HandleHibernateKeyLongPress=ignore

#HandleSuspendKeyLongPress=hibernate
por
HandleSuspendKeyLongPress=ignore

#HibernateKeyIgnoreInhibited=no
por
HibernateKeyIgnoreInhibited=no

sudo systemctl restart systemd-logind




no instalado plasma5-integration

Administrador de red para KDE plasma-nm
kpipewire

kwayland es una biblioteca que proporciona la integración de KDE con el protocolo Wayland.
Wayland es un protocolo moderno que reemplaza a X11 como el sistema de ventanas en Linux,
ofreciendo una arquitectura más eficiente y segura para la gestión de gráficos y entradas.
# paru -S kwayland plasma-wayland-protocols

Si estás utilizando un entorno de escritorio basado en Xorg y deseas ejecutar aplicaciones que requieren Wayland
# paru -S xorg_kwayland

No es necesario: Si ya has instalado packagekit-qt6, no necesitas instalar packagekit-qt5
a menos que tengas aplicaciones específicas que requieran Qt5. En general,
las aplicaciones más nuevas están migrando a Qt6, por lo que es probable que
no necesites packagekit-qt5 a menos que estés utilizando software más antiguo
o específico que aún dependa de Qt5.
# paru -S packagekit-qt5


themes y tal para kde
https://store.kde.org/p/1293160

decoración de ventanas mas rapido oxigen que bleezer

1. Ubicación de los Archivos de Configuración

Los archivos de configuración de KDE Plasma se encuentran principalmente en el directorio de configuración del usuario, que suele ser ~/.config/. Algunos de los archivos y directorios más relevantes son:

    ~/.config/plasma-org.kde.plasma.desktop-appletsrc: Este archivo contiene la configuración de los paneles y los widgets en el escritorio.
    ~/.config/kdeglobals: Aquí se almacenan configuraciones globales para el entorno de KDE, como temas, colores y fuentes.
    ~/.config/kwinrc: Este archivo contiene configuraciones específicas para el gestor de ventanas KWin, que es responsable de la gestión de ventanas en KDE Plasma.
    ~/.config/kscreenlockerrc: Configuraciones relacionadas con el protector de pantalla y la pantalla de bloqueo.









Desistimos de LXQT estan migrando a wayland y qt6 y es un problema quizas mas adelante









GESTORES DE VENTANA EN MOSAICOS

Xmonad, para wayland Waymonad el desarrollo vá muy lento.

i3, para wayland Sway desarrollo muy activo.











Aplicaciones

# Actualiza la base de datos de paquetes
paru -Sy

# Función para instalar paquetes
install() {
    local option="$1"
    if ! paru -Qi "$option" > /dev/null 2>&1; then
        paru -S --noconfirm "$option"
    fi
}


paru -S man-pages man-db

actualizamos la base de datos
man-db

paru -S zsh

paru -S riseup-vpn

paru -S jitsi-meet-desktop jitsi-videobridge


Para conectar via usb telefonos android

sudo pacman -S libmtp

adbusers

para Gnome
sudo pacman -S gvfs-mtp gvfs-gphoto2

para KDE
sudo pacman -S libmtp kio kio-extras



instalamos kitty

# wget -P /usr/local/bin https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/kittyInstall.sh
# chmod +x /usr/local/bin/kittyInstall.sh
# /usr/local/bin/kittyInstall.sh


Instalamos Zellij
Zellij es una opción excelente para aquellos que buscan un multiplexor de terminal moderno y eficiente,
una alternativa a tmux.
paru -S zellij zellij-selector



Smartmontools es un conjunto de herramientas que permite monitorear y gestionar
el estado de los discos duros y unidades de estado sólido (SSD) utilizando
la tecnología S.M.A.R.T. (Self-Monitoring, Analysis, and Reporting Technology)
smartmontools
usos
sudo smartctl -a /dev/sda
sudo smartctl -t short /dev/sda
sudo smartctl -t long /dev/sda
sudo systemctl enable smartd
sudo systemctl start smartd

paru -S firefox vlc mpv archlinux-wallpaper
gestores de paquetes AUR
pamac-qt octopi discover (esta última permite Flatpak y Snap)
# htop btop






Si buscas editores de texto optimizados para Qt con integración de GIT:
Kate es una excelente opcion, tiene soporte para Git a través de plugins
QOwnNotes es ideal si necesitas un editor de notas con características adicionales, mientras que
Qt Creator es perfecto si trabajas en proyectos de desarrollo (IDE) en Qt.
Interfaz gráfica para realizar operaciones de Git (commit, push, pull, branch, etc.).











si todo va correcto

navegadores QT:
sudo pacman -S qutebrowser
Qutebrowser es un navegador web de código abierto,
diseñado para ser controlado principalmente mediante el teclado,
con un estilo de interfaz minimalista que se inspira en editores de texto como Vim.
Utiliza QtWebEngine, que se basa en Chromium.
No soporta extensiones de Firefox o Chrome.


y Falkon

htop glances fastfetch
paru -S spotify visual-studio-code-bin


paru -S git-credential-manager-core git-cola
meld
jdownloader draw.io

paru -S paru -S libreoffice-fresh-es

Creamos identificación y clonamos repositorios de nustro git

https://github.com/c2mismo/documentos/blob/master/Informatica/machines/Instalaci%C3%B3n%20Ubuntu%2022.04


Instalar juegos:
https://github.com/c2mismo/documentos/blob/master/Informatica/machines/ArchLinux%20i9/ArchLinux%20Games




futuro escript de instalación e instalacion

sudo pacman -Syu


busca y elimina dependencias innecesarias, paquetes huerfanos, sus archivos de configuración
sudo pacman -Rns $(pacman -Qtdq)
para que solo quede de cache una sola version tanto de instalados como desinstalados
sudo paccache -rk1
sudo paccache -ruk1





dotfiles
nano .config/kitty/kitty.conf 
nano .config/kitty/colors.conf
.config/paru/paru.conf



