

Instalación de ArchLinux con arranque dual,
para Windows 11, ArchLinux y espacio reservado
para otro SO, la raiz de Arch encriptada y
formateado en btrfs.

Para facilitar la instalación con arranque dual y hacer una instalación,
libiana, la imagen de windows fué grabada y customizada gracias a Rufus, de la siguiente manera:

Remove requirement for 4GB+ RAM, SecureBoot and TPM 2.0
Remove requirement for an online Microsoft account
Disable data collection (Skip privace questions)
Disable BitLocker automatic device encryption

La primera y última opción son imprescindibles para dual boot.



También no menos importante, ampliar la partición, por defecto
de EFI de linux de 100 MiB a 250 MiB, para ello antes de instalar
windows le haremos nosotros una partición EFI vacía, para seguidamente
instalar windows, que siempre hay que instalarla antes que linux,
al indicarle el tamaño de su instalación, no durará
en utilizar entre sus particiones la EFI ya formateada.

El número y tamaño de las particiones de windows variará dependiendo,
de la variante de windows que instalemos, yo me limité ha instalar
la home básica, solo uso windows en casos muy puntuales.

Como verás no tengo ni la partición que windows reserva, normalmente
en la versión home en la cuarta partición de unos 500 MiB para hibernación.
En caso de tenerla se debe desabilitar la hibernación siempre que se usa
más de un S.O., no es raro que den conflicto y puedan dar mas de
un quebradero de cabeza.

Por ello en windows se desabilita el FastStartup, tecla Win y cmd,
pulsar con el boton derecho del ratón y ejecutar como administrador,
powercfg /H off

Se aconseja reiniciar un par de veces para asegurarse que no quede
resto de hibernación alguna.



Arrancamos ArchLinux, es hora de ponernos con lo interesante.


# loadkeys es

si no se ve bien el texto
# setfont sun12x22

lat2-08.psfu
lat2-16.psfu
lat4-19.psfu
sun12x22.psfu
solar24x32.psfu

listar tipos de fuente
$ ls -l /usr/share/fonts


Verificar si el PC tiene arranque EFI
y si es así su arquitactura 32 o 64 bits

cat /sys/firmware/efi/fw_platform_size


particiones en disco 1TB

/dev/nvme0n1p1 -   250 MiB EFI System                    fat32 /efi        boot,esp

/dev/nvme0n1p2 -    16 MiB Basic data partition                            msftres


/dev/nvme0n1p3 - 199.7 GiB Microsoft reserve partition   ntfs /mnt/windows msftdata


/dev/nvme0n1p4 -     4 GiB Extended boot loader          btrfs /boot

/dev/nvme0n1p5 -   400 GiB Linux root(x86-64)            btrfs /

/dev/nvme0n1p6 -    40 GiB Microsoft basic data          exFAT

/dev/nvme0n1p7 - 299.5 GiB Linux reserved

/dev/nvme0n1p8 -    33 GiB Linux swap



Primero antes de instalar windows

miramos discos

lsblk

si no es GPT:
sudo parted /dev/sda
(parted) mklabel gpt
(parted) quit

cfdisk /dev/nvme0n1

Nueva la primera 250 MiB como Tipo EFI System
Write y Exit

Formateamos
mkfs.fat -F32 -n EFI System /dev/nvme0n1p1

Salimos de la instalación
reboot

instalamos windows




Continuamos con Arch

# loadkeys es

# setfont lat2-16



para conectar wifi

iwctl

device list

Solo si powered es Off:
adapter Nombre_del_adaptador set-property Powered on


buscamos redes
station Nombre_del_adaptador scan

mostramos redes
station Nombre_del_adaptador get-networks

conectamos
station Nombre_del_adaptador connect "SSID o nombre de la red"

verificamos
station Nombre_del_adaptador show

exit

ping Archlinux.org


sincronizamos relog
timedatectl set-ntp true


Si necesitamos una fuente mas grande "no es necesario"
# pacman -Sy
# pacman -S terminus-font

# setfont ter-v32n



Si quieres usara el instalador de arch
# archinstall
si es asi te puedes olvidar del resto del manual


lsblk

cfdisk /dev/nvme0n1

creamos el resto de particiones indicando sus tipos

partición para boot este debe de excluirse de la encriptación,
complica mucho la instalación y la recuperación del sistema.

/dev/nvme0n1p4 -     4 GiB Extended boot loader          btrfs /boot


partición para el sistema en general, a causa de los dichosos
flatpak y otras instalaciones y cachés el tamaño que preciso
entre home y root es demasiado variopinto, y me he acostumbrado
a guardar todo lo que no quiero perder en otras unidades y en la red,
esta vez he optado por unificar estas clasicas particiones
en una sola y beneficiarme de una mayor flexibilidad.

/dev/nvme0n1p5 -   400 GiB Linux root(x86-64)            btrfs /


he asignado una pequeña partición para intercambio de datos y archivos
entre linux y windows através de SAMBA, siempre lo hecho de menos

/dev/nvme0n1p6 -    40 GiB Microsoft basic data          exFAT


¿32 GiB para SWAP? No no me he vuelto loco a pesar de tener 32 GiB de RAM,
la he dejado al final del disco para modificarla con facilidad,
quiero testear y ver si puedo sacarle probecho, para tener
una IA tipo Llama3 instalada en mi propio equipo, ya la he tenido
y una 8b no ha ido demasiado mal :P

/dev/nvme0n1p8 -    33 GiB Linux swap



encriptamos raiz

cryptsetup luksFormat /dev/nvme0n1p5 --cipher aes-xts-plain64 --key-size 256 --hash sha512
para una clave de 32 caracteres ASCII

la desencriptamos

cryptsetup open /dev/nvme0n1p5 cryptroot

la formateamos

mkfs.btrfs -L ArchRoot /dev/mapper/cryptroot


preparar aqui la swap encriptar crypttab luego como root


y el resto

mkfs.btrfs -L ArchBoot /dev/nvme0n1p4

pacman -S exfat-utils

mkfs.exfat -n samba /dev/nvme0n1p6





pacman -S wget


montamos todas las particiones necesaria y todas aquellas
que queremos añadir desde primera hora en el fstab directamente en /mnt
para preinstalar el sistema

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initmount.sh

# chmod +x initmount.sh
# ./initmount.sh

La de windows por evitar problemas de integridad
no la vamos a montar para ello hemos creado la
samba para intercambiar archivos entre los dos SOs






instalamos el sistema base en /mnt

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initinstall.sh

# chmod +x initinstall.sh
# ./initinstall.sh

mas adelante podemos instalar linux linux-headers, así tenemos dos núcleos y evitamos problemas
pero en un principio va aligerar la instalación



creamos el fstab

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initfstab.sh

# chmod +x initfstab.sh
# ./initfstab.sh




Como ya hemos instalado la base del sistema
accedemos a el
# arch-chroot /mnt




configuraciones básicas



Configueramos teclados en español, sistema en ingles y
usuarios en español

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/langConfig.sh

# chmod +x langConfig.sh
# ./langConfig.sh




Desabilitamos la hibernación necesario si queremos tener instalados mas de un SOs

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/disable-sleep.sh

# chmod +x disable-sleep.sh
# ./disable-sleep.sh



creamos y configuramos usuarios
le otorgamos el passwd al root
creará un usuario sin privilegios "visitante"
creará un usuario con el nombre que indiquemos con privilegios superuser

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/createuser.sh

# chmod +x createuser.sh
# ./createuser.sh
# rm createuser.sh




cd visitante
sudo pacman -Sy
tiene que dar error este usuario no es superadmin

exit

cd nombreUsuario
sudo pacman -Sy
este si es superadmin nos lo debe de permitir

exit




añadimos windows al grub

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/addwindows.sh

# chmod +x addwindows.sh
# ./addwindows.sh





Configuramos para desencriptar el sistema de archivos raíz, ROOT (/),
a traves del initramfs, en los proximos inicios


# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/cryptroot.sh

# chmod +x cryptroot.sh
# ./cryptroot.sh





La swap vamos a encriptarla en cada inicio con una clave aleatoria diferente
de forma que actuará como una ram volatil ya que no será accesible en cada reinicio

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/cryptswap.sh

# chmod +x cryptswap.sh
# ./cryptswap.sh




VERIFICA
Incluimos los modules del kernel necesarios para que initramfs pueda desencriptar
usando systemd, recuerda sd-encrypt debe estar antes que filesystems y
añadimos el modulo para Intel y sd-vconsole

limpiamos este
==> WARNING: consolefont: no font found in configuration
definimos una fuente de consola "FONT=ter-v32n"
ya añadido con createuser.sh verificar
cat /etc/vconsole.conf
Entonces añadimos el HOOK consolefont al usar systemd sería sd-vconsole

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/initramsf.sh

# chmod +x initramsf.sh
# ./initramsf.sh
# rm initramsf.sh




Instalamos y configuramos grub para el arranque

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/grubInstall.sh

# chmod +x grubInstall.sh
# ./grubInstall.sh
# rm grubInstall.sh




# systemctl enable NetworkManager


reiniciamos para comprobar si el sistema arranca por si mismo
todabia sin gestor de ventanas

$ exit
repetir exit hasta salir de chroot
$ umount -R /mnt
$ reboot






conectamos a internet

# nmtui-connect

$ ping -c 3 archlinux.com


timedatectl show-timesync
sincronizamos relog
timedatectl set-ntp true

timedatectl show-timesync




verificando

$ lspci -k

# dmesg | grep usbcore
# dmesg | grep i915 | less

swapon --show

verificamos que los discos se hayan montado correctamente

$ lsblk

$ journalctl -b | grep cryptsetup





configuramos pacman y añadimos los repositorios
# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/pacmanConf.sh

# chmod +x pacmanConf.sh
# ./pacmanConf.sh

# chmod +x pacmanRepo.sh
# ./pacmanRepo.sh

sudo pacman -Syu
verificamos si de como salida una lista de aplicaciones
sudo pacman -Sl multilib







instalamos paru que nos permite instalar
paqueteria del repositorio de la comunidad
AUR y a la vez gestiona los repositorios
oficiales

para compilar es necesario ser un usuario
con permisos de administrador directamente
como superadmin root no te lo permite

accedemos al home
cd ~
git clone https://aur.Archlinux.org/paru.git
cd paru
makepkg -si

comprobamos paru
paru -Syu
paru -S paru

$ cd ..
$ rm -Rf paru







-------------------------------------
no ejecutado
paru -S ranger
paru -S mkinitcpio-firmware

Tenemos que verificar si del "mkinitcpio -P" eliminamos los
==> WARNING: Possibly missing firmware for module: 'module_name'
aic94xx, ast, bfa, bnx2x, liquidio, mlxsw_spectrum, nfp, qed, qla1280, qla2xxx, wd719x, xhci_pci

tarda un ratito deberiamos haber instalado solo un kernel y al acabar instalar el zen el proceso habria sido mas rapido

==> WARNING: Possibly missing firmware for module: 'qat_420xx'
indica que el firmware para el módulo qat_420xx, relacionado con la tecnología Intel QuickAssist, no está presente en tu sistema.
-------------------------------------





Instalamos y preparamos sistema para el procesador i9

verifica antes /etc/X11/xorg.conf.d/20-intel.conf

$ wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/install_i9.sh

chmod +x install_i9.sh
sudo ./install_i9.sh





***********
Instalamos el servidor de audio pipewire
wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/install_i9.sh

chmod +x soundServer.sh
sudo ./soundServer.sh








kde mínimo para mayor integridad y minimo un terminal y un explorador de archivos
# paru -S plasma-desktop plasma-workspace plasma5-integration qterminal pcmanfm-qt

kwayland es una biblioteca que proporciona la integración de KDE con el protocolo Wayland.
Wayland es un protocolo moderno que reemplaza a X11 como el sistema de ventanas en Linux,
ofreciendo una arquitectura más eficiente y segura para la gestión de gráficos y entradas.
# paru -S kwayland plasma-wayland-protocols

Si estás utilizando un entorno de escritorio basado en Xorg y deseas ejecutar aplicaciones que requieren Wayland
# paru -S xorg_kwayland

No es necesario: Si ya has instalado packagekit-qt6, no necesitas instalar packagekit-qt5
a menos que tengas aplicaciones específicas que requieran Qt5. En general,
las aplicaciones más nuevas están migrando a Qt6, por lo que es probable que
no necesites packagekit-qt5 a menos que estés utilizando software más antiguo
o específico que aún dependa de Qt5.
# paru -S packagekit-qt5


themes y tal para kde
https://store.kde.org/p/1293160

decoración de ventanas mas rapido oxigen que bleezer y oxigen viene por defecto





Instalamos el servidor de audio pipewire
$ wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/installLxqt.sh

chmod +x installLxqt.sh
sudo ./installLxqt.sh


lxqt
 packagekit-qt6
paru -S qterminal pcmanfm-qt discover pamac-aur firefox vlc mpv


$ sudo paru -S sddm

$ sudo systemctl enable sddm.service
$ sudo reboot


si todo ha ido bien estaras navegando por el gestor de escritorio



zsh


si todo va correcto

a por el gestor de ventanas

htop glances fastfetch
paru -S spotify visual-studio-code-bin
steam git-cola meld
jdownloader draw.io



Creamos identificación y clonamos repositorios de nustro git

https://github.com/c2mismo/documentos/blob/master/Informatica/machines/Instalaci%C3%B3n%20Ubuntu%2022.04







futuro escript de instalación e instalacion

sudo pacman -Syu


busca y elimina dependencias innecesarias, paquetes huerfanos, sus archivos de configuración
sudo pacman -Rns $(pacman -Qtdq)
para que solo quede de cache una sola version tanto de instalados como desinstalados
sudo paccache -rk1
sudo paccache -ruk1










