

Instalación de ArchLinux con arranque dual,
para Windows 11, ArchLinux y espacio reservado
para otro SO, la raiz de Arch encriptada y
formateado en btrfs.

Para facilitar la instalación con arranque dual y hacer una instalación,
libiana, la imagen de windows fué grabada y customizada gracias a Rufus, de la siguiente manera:



Remove requirement for 4GB+ RAM, SecureBoot and TPM 2.0
Remove requirement for an online Microsoft account
Disable data collection (Skip privace questions)
Disable BitLocker automatic device encryption

La primera y última opción son imprescindibles para dual boot.



También no menos importante, ampliar la partición, por defecto
de EFI de linux de 100 MiB a 250 MiB, para ello antes de instalar
windows le haremos nosotros una partición EFI vacía, para seguidamente
instalar windows, que siempre hay que instalarla antes que linux,
al indicarle el tamaño de su instalación, no durará
en utilizar entre sus particiones la EFI ya formateada.

El número y tamaño de las particiones de windows variará dependiendo,
de la variante de windows que instalemos, yo me limité ha instalar
la home básica, solo uso windows en casos muy puntuales.

Como verás no tengo ni la partición que windows reserva, normalmente
en la versión home en la cuarta partición de unos 500 MiB para hibernación.
En caso de tenerla se debe desabilitar la hibernación siempre que se usa
más de un S.O., no es raro que den conflicto y puedan dar mas de
un quebradero de cabeza.

Por ello en windows se desabilita el FastStartup, tecla Win y cmd,
pulsar con el boton derecho del ratón y ejecutar como administrador,
powercfg /H off

Se aconseja reiniciar un par de veces para asegurarse que no quede
resto de hibernación alguna.



Arrancamos ArchLinux, es hora de ponernos con lo interesante.


# loadkeys es

si no se ve bien el texto
# setfont sun12x22

lat2-08.psfu
lat2-16.psfu
lat4-19.psfu
sun12x22.psfu
solar24x32.psfu

listar tipos de fuente
$ ls -l /usr/share/fonts


Verificar si el PC tiene arranque EFI
y si es así su arquitactura 32 o 64 bits

cat /sys/firmware/efi/fw_platform_size


particiones en disco 1TB

/dev/nvme0n1p1 -   250 MiB EFI System                    fat32 /efi        boot,esp

/dev/nvme0n1p2 -    16 MiB Basic data partition                            msftres


/dev/nvme0n1p3 - 199.7 GiB Microsoft reserve partition   ntfs /mnt/windows msftdata

Me ha hecho windows otra partición de 700 MiB en este punto

/dev/nvme0n1p4 -     4 GiB Extended boot loader          btrfs /boot

/dev/nvme0n1p5 -   400 GiB Linux root(x86-64)            btrfs /

/dev/nvme0n1p6 -    40 GiB Microsoft basic data          exFAT

/dev/nvme0n1p7 - 299.5 GiB Linux reserved

/dev/nvme0n1p8 -    33 GiB Linux swap



Primero antes de instalar windows

miramos discos

lsblk

si no es GPT:
sudo parted /dev/sda
(parted) mklabel gpt
(parted) quit

cfdisk /dev/nvme0n1

Nueva la primera 250 MiB como Tipo EFI System
Write y Exit

Formateamos
mkfs.fat -F32 -n EFI System /dev/nvme0n1p1

Salimos de la instalación
reboot

instalamos windows

Nueva partición 204800 MiB



Continuamos con Arch

# loadkeys es

# setfont lat2-16



para conectar wifi

iwctl

device list

Solo si powered es Off:
adapter Nombre_del_adaptador set-property Powered on


buscamos redes
station Nombre_del_adaptador scan

mostramos redes
station Nombre_del_adaptador get-networks

conectamos
station Nombre_del_adaptador connect "SSID o nombre de la red"

verificamos
station Nombre_del_adaptador show

exit

ping Archlinux.org


sincronizamos relog
timedatectl set-ntp true


Si necesitamos una fuente mas grande "no es necesario"
# pacman -Sy
# pacman -S terminus-font

# setfont ter-v32n
No es mas grande, habria que buscar mas fuentes


Si quieres usara el instalador de arch
# archinstall
si es asi te puedes olvidar del resto del manual


lsblk

cfdisk /dev/nvme0n1

creamos el resto de particiones indicando sus tipos

partición para boot este debe de excluirse de la encriptación,
complica mucho la instalación y la recuperación del sistema.

/dev/nvme0n1p4 -     4 GiB Extended boot loader          btrfs /boot
4096 MiB

partición para el sistema en general, a causa de los dichosos
flatpak y otras instalaciones y cachés el tamaño que preciso
entre home y root es demasiado variopinto, y me he acostumbrado
a guardar todo lo que no quiero perder en otras unidades y en la red,
esta vez he optado por unificar estas clasicas particiones
en una sola y beneficiarme de una mayor flexibilidad.
Además tener en cuenta que el btrfs lo tengo en modo copia de seguridad (dup),
no ocupan los datos el doble pero si ocupa bastante más.

/dev/nvme0n1p5 -   400 GiB Linux root(x86-64)            btrfs /
409600 MiB

he asignado una pequeña partición para intercambio de datos y archivos
entre linux y windows.


/dev/nvme0n1p6 -    40 GiB Microsoft basic data exFAT
40960 MiB

¿32 GiB para SWAP? No no me he vuelto loco a pesar de tener 32 GiB de RAM,
la he dejado al final del disco para modificarla con facilidad,
quiero testear y ver si puedo sacarle probecho, para tener
una IA tipo Llama3 instalada en mi propio equipo, ya la he tenido
y una 8b no ha ido demasiado mal :P

/dev/nvme0n1p8 -    33 GiB Linux swap



encriptamos raiz

cryptsetup luksFormat /dev/nvme0n1p5 --cipher aes-xts-plain64 --key-size 256 --hash sha512
para una clave de 32 caracteres ASCII máximo

la desencriptamos

cryptsetup open /dev/nvme0n1p5 cryptroot

la formateamos con copia de seguridad

mkfs.btrfs -L ArchRoot --data dup --metadata dup /dev/mapper/cryptroot


y el resto

mkfs.btrfs -L ArchBoot --data dup --metadata dup /dev/nvme0n1p4


Para tener una partición de intercambio con cualquier SO's
pacman -S exfatprogs

mkfs.exfat -n "WINLINUX" -c 64K /dev/nvme0n1p6


La SWAP es una partición sin sistema de archivos (solo tipo Linux swap)
Esto solo prepara la partición para swap, sin cifrado;
luego se aplicará el cifrado con dm-crypt

mkswap /dev/nvme0n1p8



pacman -S wget


montamos todas las particiones necesarias para preinstalar el sistema

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/initmount.sh
Verificar:
# nano initmount.sh
# chmod +x initmount.sh
# ./initmount.sh

La partición de windows por evitar problemas de integridad
no la vamos a montar para ello hemos creado la
WINLINUX para intercambiar archivos entre los dos SOs






instalamos el sistema base en /mnt

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/initinstall.sh

# chmod +x initinstall.sh
# ./initinstall.sh

mas adelante podemos instalar linux linux-headers, así tenemos dos núcleos y evitamos problemas
pero en un principio va aligerar la instalación




Como ya hemos instalado la base del sistema
accedemos a el
# arch-chroot /mnt




configuraciones básicas



Configueramos teclados en español, sistema en ingles y
usuarios en español

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/langConfig.sh
Verificar:
# nano langConfig.sh
# chmod +x langConfig.sh
# ./langConfig.sh


# paru -S man-pages man-db


Desabilitamos la hibernación necesario si queremos tener instalados mas de un SOs

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/disable-sleep.sh
Verificar:
# nano disable-sleep.sh
# chmod +x disable-sleep.sh
# ./disable-sleep.sh



el grupo plugdev aún no existe
creamos y configuramos usuarios
le otorgamos el passwd al root
creará un usuario sin privilegios "visitante"
creará un usuario con el nombre que indiquemos con privilegios superuser

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/createuser.sh
Verificar:
# nano createuser.sh
# chmod +x createuser.sh
# ./createuser.sh




Podemos comprobar si se han creado bién los usuarios
su $USER
sudo pacman -Sy
este si es superadmin nos lo debe de permitir




creamos el fstab despues de crear el usuario para añadir correctamente la partición WinLinux

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/initfstab.sh
Verificar:
# nano initfstab.sh
# chmod +x initfstab.sh
# ./initfstab.sh




añadimos windows al grub

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/addwindows.sh
Verificar:
# nano addwindows.sh
# chmod +x addwindows.sh
# ./addwindows.sh





Configuramos para desencriptar el sistema de archivos raíz, ROOT (/),
a traves del initramfs, en los proximos inicios


# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/cryptroot.sh
Verificar:
# nano cryptroot.sh
# chmod +x cryptroot.sh
# ./cryptroot.sh


# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/cryptswap.sh
Verificar:
# nano cryptswap.sh
# chmod +x cryptswap.sh
# ./cryptswap.sh



VERIFICA
Incluimos los modules del kernel necesarios para que initramfs pueda desencriptar
usando systemd y sd-vconsole y añadimos el modulo para Intel

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/initramsf.sh
Verificar:
# nano initramsf.sh
# chmod +x initramsf.sh
# ./initramsf.sh




Instalamos y configuramos grub para el arranque

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/grubInstall.sh
Verificar:
# nano grubInstall.sh
# chmod +x grubInstall.sh
# ./grubInstall.sh

Tenemos que configurar el grub
añadimos tambien: snd_hda_intel.dmic_detect=0 para que el sistema nos detecte correctamente
la targeta de sonido HDA Intel PCH
GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet snd_hda_intel.dmic_detect=0"

O podemos hacer un script:

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/grubConfig.sh
Verificar:
# nano grubConfig.sh
# chmod +x grubConfig.sh
# ./grubConfig.sh



-------------------------------------
lspci -nnk
Tenemos que verificar si del "mkinitcpio -P" eliminamos los
==> WARNING: Possibly missing firmware for module: 'module_name'
aic94xx, ast, bfa, qed, qla1280, qla2xxx, wd719x, xhci_pci_renesas
Por qué: los módulos que mencionas, son controladores para hardware específico
(controladoras SCSI/HBA de ciertos proveedores, interfaces USB/renesas, GPUs AST en servidores,
adaptadores QLogic/QED, etc.). En tu lspci aparecen sólo dispositivos Intel, Micron NVMe y chipsets comunes
(i915, nvme, iwlwifi, e1000e, igb, etc.), y los controladores que esos dispositivos usan están ya cargados
(i915, nvme, iwlwifi, e1000e, igb, ahci, etc.).
-------------------------------------




sincronizamos relog &
Instalamos gestor de RED NetworkManager con iwd que mejora la seguridad y la eficiencia

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/redConfig.sh
Verificar:
# nano redConfig.sh
# chmod +x redConfig.sh
# ./redConfig.sh



Preparamos para que el sistema no tenga problemas a la hora de montar
particiones NTFS:

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/ntfs-3g.sh
Verificar:
# nano ntfs-3g.sh
# chmod +x ntfs-3g.sh
# ./ntfs-3g.sh




reiniciamos para comprobar si el sistema arranca por si mismo
todabia sin gestor de ventanas

$ exit
repetir exit hasta salir de chroot
$ umount -R /mnt
$ reboot






conectamos a internet

# nmtui-connect

$ ping -c 3 archlinux.com









verificando

$ lspci -k | less

# dmesg | grep usbcore
# dmesg | grep i915

swapon --show

verificamos que los discos se hayan montado correctamente

$ lsblk

$ journalctl -b | grep cryptsetup


























$ wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/install_i9.sh
Verificar:
# nano install_i9.sh
chmod +x install_i9.sh
./install_i9.sh


Instalando los servicios de bluetooth
# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/btInstall.sh
Verificar:
# nano btInstall.sh
# chmod +x btInstall.sh
# ./btInstall.sh

verificar:
# systemctl status bluetooth.service

En la última instalación no se "enable" correctamente.



***********




configuramos pacman y añadimos los repositorios
# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/pacmanConf.sh
Verificar:
# nano pacmanConf.sh
# chmod +x pacmanConf.sh
# ./pacmanConf.sh

# wget https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/pacmanRepo.sh
Verificar:
# nano pacmanRepo.sh
# chmod +x pacmanRepo.sh
# ./pacmanRepo.sh





VERIFICAR que el repositorio de paru es limpiado del disco
instalamos paru que nos permite instalar
paqueteria del repositorio de la comunidad
AUR y a la vez gestiona los repositorios
oficiales



Cuidado descargar y ejecutar en /usr/local/bin:
# wget -P /usr/local/bin https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/paruInstallConf.sh
Verificar:
# nano /usr/local/bin/paruInstallConf.sh
# chmod +x /usr/local/bin/paruInstallConf.sh
# sh /usr/local/bin/paruInstallConf.sh




VERIFICAR las configuraciones de usuario
Instalamos el servidor de AUDIO pipewire
# wget -P /usr/local/bin https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/soundServer.sh
Verificar:
# nano /usr/local/bin/soundServer.sh
# chmod +x /usr/local/bin/soundServer.sh
# sh /usr/local/bin/soundServer.sh
















GESTORES DE VENTANAS KDE


kde mínimo pero plasma completo para mayor integridad y minimo un terminal y un explorador de archivos
# paru -S plasma plasma-desktop kde-system kde-accessibility kwalletmanager kdialog khelpcenter partitionmanager dolphin dolphin-plugins kcalutils ark kate kcharselect lximage-qt okular kgpg kdeconnect kdenetwork-filesharing


Tema SDDM:
https://store.kde.org/s/KDE%20Store/p/2142845

Descomprimir

# mkdir /usr/share/sddm/themes/Noir-SDDM-6


# nano /usr/lib/sddm/sddm.conf.d/default.conf
[General]
NumLock=on
[Theme]
Current=Noir-SDDM-6




# sudo systemctl enable sddm.service


fuentes:

paru -S awesome-terminal-fonts-git
paru -S powerline-fonts-git
paru -S nerd-fonts-source-code-pro
paru -S nerd-fonts-fira-code

Regeneramos "si no lo hace" el caché de las fuentes
fc-cache --force


instalamos kitty

# wget -P /usr/local/bin https://raw.githubusercontent.com/c2mismo/archLinux/refs/heads/main/scripts/kittyInstall.sh
Verificar:
# nano /usr/local/bin/kittyInstall.sh
# chmod +x /usr/local/bin/kittyInstall.sh
# sh /usr/local/bin/kittyInstall.sh


Aplicaciones básicas:
# paru -S firefox kmix filelight kalgebra kompare kolourpaint kget ktorrent isoimagewriter p7zip unrar lzip zip unzip

Para compatibilidad con Dolphin, para MTP con teléfonos móviles
# paru -S libmtp kio-admin kio-extras

Instalador gráfico de aplicaciones, es el mas oficial y usa flatpak,
seguramente instalado prefiero evitar los flatpak, ocupan demasiado:
paru -S discover packagekit packagekit-qt5 appstream appstream-qt

Instalador gráfico de aplicaciones, parecido a Synaptic de ubuntu
paru -S octopi

paru -S jdk-openjdk

paru -S python python-pip

gestion de video
paru -S ffmpeg libde265 libheif vlc libdvdcss gst-plugins-ugly gst-plugins-bad












Diferentes paquetes de aplicaciones de KDE yo no las instalo completas, pero digno de verificar:
kde-applications kde-network kde-utilities kde-multimedia kde-graphics kde-education kde-games kde-pim kde-sdk
kde-applications-meta kde-network-meta kde-utilities-meta
















nos aseguramos que el sistema no haga hibernación

deshabilitar la hibernacion:
cp /etc/systemd/logind.conf /etc/systemd/logind.conf.backup
sudo nano /etc/systemd/logind.conf

#HandlePowerKey=ignore
por
HandlePowerKey=ignore

#HandlePowerKeyLongPress=poweroff
por
HandlePowerKeyLongPress=poweroff

#HandleHibernateKey=hibernate
por
HandleHibernateKey=ignore

#HandleHibernateKeyLongPress=ignore
por
HandleHibernateKeyLongPress=ignore

#HandleSuspendKeyLongPress=hibernate
por
HandleSuspendKeyLongPress=ignore

#HibernateKeyIgnoreInhibited=no
por
HibernateKeyIgnoreInhibited=no

sudo systemctl restart systemd-logind









themes y tal para kde
https://store.kde.org/p/1293160

decoración de ventanas mas rapido oxigen que bleezer

1. Ubicación de los Archivos de Configuración

Los archivos de configuración de KDE Plasma se encuentran principalmente en el directorio de configuración del usuario, que suele ser ~/.config/. Algunos de los archivos y directorios más relevantes son:

    ~/.config/plasma-org.kde.plasma.desktop-appletsrc: Este archivo contiene la configuración de los paneles y los widgets en el escritorio.
    ~/.config/kdeglobals: Aquí se almacenan configuraciones globales para el entorno de KDE, como temas, colores y fuentes.
    ~/.config/kwinrc: Este archivo contiene configuraciones específicas para el gestor de ventanas KWin, que es responsable de la gestión de ventanas en KDE Plasma.
    ~/.config/kscreenlockerrc: Configuraciones relacionadas con el protector de pantalla y la pantalla de bloqueo.







OTROS GESTORES DE VENTANA

Desistimos de LXQT estan migrando a wayland y qt6 y es un problema quizas mas adelante


GESTORES DE VENTANA EN MOSAICOS

Xmonad, para wayland Waymonad el desarrollo vá muy lento.

i3, para wayland Sway desarrollo muy activo.











Aplicaciones

# Actualiza la base de datos de paquetes
paru -Sy

# Función para instalar paquetes
install() {
    local option="$1"
    if ! paru -Qi "$option" > /dev/null 2>&1; then
        paru -S --noconfirm "$option"
    fi
}











Smartmontools es un conjunto de herramientas que permite monitorear y gestionar
el estado de los discos duros y unidades de estado sólido (SSD) utilizando
la tecnología S.M.A.R.T. (Self-Monitoring, Analysis, and Reporting Technology)
smartmontools
usos
sudo smartctl -a /dev/sda
sudo smartctl -t short /dev/sda
sudo smartctl -t long /dev/sda
sudo systemctl enable smartd
sudo systemctl start smartd






